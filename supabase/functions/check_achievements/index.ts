import { serve } from 'https://deno.land/std@0.177.0/http/server.ts';
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

interface Achievement {
  id: string;
  name: string;
  icon: string;
}

interface AchievementsResponse {
  new_achievements: Achievement[];
}

interface WorkoutDateResponse {
  date: string;
}

interface WorkoutDurationResponse {
  total_duration: number;
}

interface ExerciseProgressResponse {
  exercise_id: string;
  initial_weight: number;
  latest_weight: number;
}

interface UserCreateDateResponse {
  created_at: string;
}

serve(async (req) => {
  try {
    if (req.method !== 'POST') {
      return new Response(
        JSON.stringify({ error: '–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' }),
        { status: 405, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
    const url = new URL(req.url);
    const userId = url.searchParams.get('user_id');

    if (!userId) {
      return new Response(
        JSON.stringify({ error: 'user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }),
        { status: 400, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // –°–æ–∑–¥–∞–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const newAchievements: Achievement[] = [];

    // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: existingAchievements, error: achievementsError } = await supabaseClient
      .from('achievements')
      .select('name')
      .eq('user_id', userId);

    if (achievementsError) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', achievementsError);
      return new Response(
        JSON.stringify({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π', details: achievementsError }),
        { status: 500, headers: { 'Content-Type': 'application/json' } }
      );
    }

    // –ú–∞—Å—Å–∏–≤ –∏–º–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    const existingAchievementNames = existingAchievements?.map(a => a.name) || [];

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º "5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥"
    if (!existingAchievementNames.includes('5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥')) {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
      const { data: workoutDates, error: workoutDatesError } = await supabaseClient
        .from('workouts')
        .select('date')
        .eq('user_id', userId)
        .eq('status', 'completed')
        .order('date', { ascending: true });

      if (!workoutDatesError && workoutDates && workoutDates.length >= 5) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–∞—Ç (–º–æ–∂–µ—Ç –±—ã—Ç—å 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ)
        let maxConsecutiveDays = 1;
        let currentConsecutiveDays = 1;

        for (let i = 1; i < workoutDates.length; i++) {
          const currentDate = new Date(workoutDates[i].date);
          const prevDate = new Date(workoutDates[i - 1].date);

          // –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
          const diffDays = Math.round((currentDate.getTime() - prevDate.getTime()) / (1000 * 60 * 60 * 24));

          if (diffDays === 1) {
            // –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –¥–µ–Ω—å
            currentConsecutiveDays++;
            maxConsecutiveDays = Math.max(maxConsecutiveDays, currentConsecutiveDays);
          } else {
            // –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            currentConsecutiveDays = 1;
          }

          if (maxConsecutiveDays >= 5) break;
        }

        if (maxConsecutiveDays >= 5) {
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥"
          newAchievements.push({
            id: crypto.randomUUID(),
            name: '5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥',
            icon: 'üî•'
          });
        }
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º "10 —á–∞—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
    if (!existingAchievementNames.includes('10 —á–∞—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫')) {
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –º–∏–Ω—É—Ç–∞—Ö
      const { data: totalDuration, error: totalDurationError } = await supabaseClient
        .from('workouts')
        .select('sum(duration)')
        .eq('user_id', userId)
        .eq('status', 'completed')
        .single();

      if (!totalDurationError && totalDuration && totalDuration.sum >= 600) {  // 600 –º–∏–Ω—É—Ç = 10 —á–∞—Å–æ–≤
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "10 —á–∞—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
        newAchievements.push({
          id: crypto.randomUUID(),
          name: '10 —á–∞—Å–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
          icon: '‚è±Ô∏è'
        });
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º "+20% –∫ –≤–µ—Å—É"
    if (!existingAchievementNames.includes('+20% –∫ –≤–µ—Å—É')) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–µ—Å–∞–º–∏, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ exercise_id
      const { data: exerciseProgresses, error: exerciseProgressesError } = await supabaseClient
        .rpc('get_weight_progress', { user_id_param: userId });

      if (!exerciseProgressesError && exerciseProgresses && exerciseProgresses.length > 0) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤–µ—Å–æ–≤ –±–æ–ª–µ–µ 20%
        const hasWeightProgress = exerciseProgresses.some(exercise => 
          exercise.initial_weight > 0 && 
          exercise.latest_weight >= exercise.initial_weight * 1.2
        );

        if (hasWeightProgress) {
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "+20% –∫ –≤–µ—Å—É"
          newAchievements.push({
            id: crypto.randomUUID(),
            name: '+20% –∫ –≤–µ—Å—É',
            icon: 'üí™'
          });
        }
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º "1 –º–µ—Å—è—Ü —Å –Ω–∞–º–∏"
    if (!existingAchievementNames.includes('1 –º–µ—Å—è—Ü —Å –Ω–∞–º–∏')) {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userData, error: userError } = await supabaseClient
        .from('users')
        .select('created_at')
        .eq('id', userId)
        .single();

      if (!userError && userData && userData.created_at) {
        const createdAt = new Date(userData.created_at);
        const now = new Date();
        const diffDays = Math.round((now.getTime() - createdAt.getTime()) / (1000 * 60 * 60 * 24));

        if (diffDays >= 30) {  // 30 –¥–Ω–µ–π = 1 –º–µ—Å—è—Ü
          // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ "1 –º–µ—Å—è—Ü —Å –Ω–∞–º–∏"
          newAchievements.push({
            id: crypto.randomUUID(),
            name: '1 –º–µ—Å—è—Ü —Å –Ω–∞–º–∏',
            icon: 'üèÜ'
          });
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –ë–î
    if (newAchievements.length > 0) {
      const achievementsToInsert = newAchievements.map(achievement => ({
        id: achievement.id,
        user_id: userId,
        name: achievement.name,
        icon: achievement.icon,
        date_earned: new Date().toISOString()
      }));

      const { error: insertError } = await supabaseClient
        .from('achievements')
        .insert(achievementsToInsert);

      if (insertError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:', insertError);
        return new Response(
          JSON.stringify({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π', details: insertError }),
          { status: 500, headers: { 'Content-Type': 'application/json' } }
        );
      }
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const response: AchievementsResponse = {
      new_achievements: newAchievements
    };

    return new Response(
      JSON.stringify(response),
      { headers: { 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    return new Response(
      JSON.stringify({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', details: error.message }),
      { status: 500, headers: { 'Content-Type': 'application/json' } }
    );
  }
}); 